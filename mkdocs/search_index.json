{
    "docs": [
        {
            "location": "/",
            "text": "Introduction to Programming\n\n\nUsing Python\n\n\nClick on the module numbers on the left panel to access the tutorials.",
            "title": "Home"
        },
        {
            "location": "/#introduction-to-programming",
            "text": "",
            "title": "Introduction to Programming"
        },
        {
            "location": "/#using-python",
            "text": "Click on the module numbers on the left panel to access the tutorials.",
            "title": "Using Python"
        },
        {
            "location": "/environment-setup/",
            "text": "Linux Installation\n\n\nIf you are using any Linux systems (like Ubuntu) or Mac, please open the terminal and type \npython\n to find out if it is already installed and which version is installed. Newer versions of Ubuntu have both Python2 and Python3 installed. Later versions of Mac, only have python2 installed, which can be sorted within the class.\n\n\nAs said, there is a very low chance of python not being there. If this is the case, follow these simple steps to install Python:\n\n\n\n\n\n\nOpen a Web browser and go to https://www.python.org/downloads/.\n\n\n\n\n\n\nFollow the link to download zipped source code available for Unix/Linux.\n\n\n\n\n\n\nDownload and extract files.\n\n\n\n\n\n\nEditing the Modules/Setup file if you want to customize some options.\n\n\n\n\n\n\nrun ./configure script\n\n\n\n\n\n\nmake\n\n\n\n\n\n\nmake install\n\n\n\n\n\n\nThis installs Python at standard location /usr/local/bin and its libraries at /usr/local/lib/pythonXX where XX is the version of Python.\n\n\nWindows Installation\n\n\n\n\n\n\nOpen a Web browser and type \nPython Installer\n\n\n\n\n\n\nClick the installer to install Python in the system. \n\n\n\n\n\n\nYou will be able to run code in the Python IDLE terminal which comes along with the install. Python IDLE is a unix-like shell which also allows you to use bash commands, and hence it is preferable to use IDLE.\n\n\n\n\n\n\nNOT NECESSARY: If by any chance you want to run from the command prompt, you will have to set the environment variables on Windows.\n\n\nPackage Installer\n\n\nEITHER pip or conda can be used for this purpose. pip comes natively with the python installation. Check if it is present by typing either \npip\n or \nconda\n on the terminal. If you don't have one, please contact the instructor of the course.\n\n\nFor a package installation, type the following command in the terminal depending on the package installer you have\n\n\n<package installer> install <package>\n\n\n\n\n\nwhere \n can be conda or pip. \n will be the package you desire to install.\n\n\nFor example, in the next tutorial, you will have to install numpy which can be done by the following command:\n\n\npip install numpy\n\n\n\n\n\nVirtual Environments\n\n\nWe'll be covering this in the class, when the need arises, to avoid confusion.",
            "title": "Environment Setup"
        },
        {
            "location": "/environment-setup/#linux-installation",
            "text": "If you are using any Linux systems (like Ubuntu) or Mac, please open the terminal and type  python  to find out if it is already installed and which version is installed. Newer versions of Ubuntu have both Python2 and Python3 installed. Later versions of Mac, only have python2 installed, which can be sorted within the class.  As said, there is a very low chance of python not being there. If this is the case, follow these simple steps to install Python:    Open a Web browser and go to https://www.python.org/downloads/.    Follow the link to download zipped source code available for Unix/Linux.    Download and extract files.    Editing the Modules/Setup file if you want to customize some options.    run ./configure script    make    make install    This installs Python at standard location /usr/local/bin and its libraries at /usr/local/lib/pythonXX where XX is the version of Python.",
            "title": "Linux Installation"
        },
        {
            "location": "/environment-setup/#windows-installation",
            "text": "Open a Web browser and type  Python Installer    Click the installer to install Python in the system.     You will be able to run code in the Python IDLE terminal which comes along with the install. Python IDLE is a unix-like shell which also allows you to use bash commands, and hence it is preferable to use IDLE.    NOT NECESSARY: If by any chance you want to run from the command prompt, you will have to set the environment variables on Windows.",
            "title": "Windows Installation"
        },
        {
            "location": "/environment-setup/#package-installer",
            "text": "EITHER pip or conda can be used for this purpose. pip comes natively with the python installation. Check if it is present by typing either  pip  or  conda  on the terminal. If you don't have one, please contact the instructor of the course.  For a package installation, type the following command in the terminal depending on the package installer you have  <package installer> install <package>  where   can be conda or pip.   will be the package you desire to install.  For example, in the next tutorial, you will have to install numpy which can be done by the following command:  pip install numpy",
            "title": "Package Installer"
        },
        {
            "location": "/environment-setup/#virtual-environments",
            "text": "We'll be covering this in the class, when the need arises, to avoid confusion.",
            "title": "Virtual Environments"
        },
        {
            "location": "/ipython-tutorial/",
            "text": "(Note: some of the screenshots here may be out-of-date. However, this should still prove\nuseful as a quick intro, and for the general menu layout, etc.)\n\n\nIn this class, we will use IPython notebooks (more recently known as \n\nJupyter notebooks\n) for the programming assignments. \nAn IPython notebook lets you write and execute Python code in your web browser. \nIPython notebooks make it very easy to tinker with code and execute it in bits \nand pieces; for this reason IPython notebooks are widely used in scientific \ncomputing.\n\n\n\n\n\nOnce you have it installed, start it with this command:\n\n\njupyter notebook\n\n\n\n\n\nOnce your notebook server is running, point your web browser at http://localhost:8888 to\nstart using your notebooks. If everything worked correctly, you should\nsee a screen like this, showing all available IPython notebooks in the current\ndirectory:\n\n\n\n\nIf you click through to a notebook file, you will see a screen like this:\n\n\n\n\nAn IPython notebook is made up of a number of \ncells\n. Each cell can contain\nPython code. You can execute a cell by clicking on it and pressing \nShift-Enter\n.\nWhen you do so, the code in the cell will run, and the output of the cell\nwill be displayed beneath the cell. For example, after running the first cell\nthe notebook looks like this:\n\n\n\n\nGlobal variables are shared between cells. Executing the second cell thus gives\nthe following result:\n\n\n\n\nBy convention, IPython notebooks are expected to be run from top to bottom.\nFailing to execute some cells or executing cells out of order can result in\nerrors:\n\n\n\n\nAfter you have modified an IPython notebook for one of the assignments by\nmodifying or executing some of its cells, remember to \nsave your changes!\n\n\n\n\nThis has only been a brief introduction to IPython notebooks, but it should\nbe enough to get you up and running on the assignments for this course.",
            "title": "Jupyter Notebook Tutorial"
        },
        {
            "location": "/lecture-1/",
            "text": "Lecture 1: Introduction to Programming\n\n\nAgenda for the Class:\n\n\n\n\nPython in-built datatypes\n\n\nBasic mathematical operators and Precedence order\n\n\nPython Interpreter vs Python for Scripting\n\n\n\n\nFirstly we'll focus on the \ndatatypes\n.\n1. \nNumeric\n\n2. \nStrings\n\n3. \nLists\n\n\nGeneral format for \nAssigning\n a variable a value:\nVariable_name = Variable_Value\n\n\n\n\nWe \nDo not\n mention datatype while assigning a variable a value in Python. (i.e. Dynamically Typed)\n\n\n=\n is used to assign a variable a value. ( L Value and R value)\n\n\nA variable name must follow certain naming conventions. Example: '23', 'len' can \nnot\n be variable names.\n\n\nThere is no such thing as \"variable declaration\" or \"variable initialization\" in Python. It's only variable assignment\n\n\n\n\nNumeric data\n\n\na\n=\n1\n\n\nb\n=\n3.14\n\n\n# Assigning value 1 to variable a and 3.14 to variable b\n\n\n\n\n\n\nMathematical Operations on Variables:\n1. Add ('+')\n2. Multiply ('*')\n3. Subtract ('-')\n4. Divide ('/') - yields a decimal answer\n5. Divide ('//') - yields an integer quotient\n6. Modulo ('%')\n7. Exponentiation (**)\n\n\nOrder of Precedence\n\n\nExponent > (Multiple, Divide, Modulo) > (Add, Subtract)\n\n\na\n \n=\n \n20\n\n\nb\n \n=\n \n10\n\n\nc\n \n=\n \n15\n\n\nd\n \n=\n \n5\n\n\ne\n \n=\n \n0\n\n\n\n\n\n\ne\n \n=\n \n(\na\n \n+\n \nb\n)\n \n*\n \nc\n \n/\n \nd\n       \n#( 30 * 15 ) / 5\n\n\nprint\n \n(\n\"Value of (a + b) * c / d is \"\n,\n  \ne\n)\n\n\n\n\n\n\ne\n \n=\n \n((\na\n \n+\n \nb\n)\n \n*\n \nc\n)\n \n/\n \nd\n     \n# (30 * 15 ) / 5\n\n\nprint\n \n(\n\"Value of ((a + b) * c) / d is \"\n,\n  \ne\n)\n\n\n\n\n\n\ne\n \n=\n \n(\na\n \n+\n \nb\n)\n \n*\n \n(\nc\n \n/\n \nd\n);\n    \n# (30) * (15/5)\n\n\nprint\n \n(\n\"Value of (a + b) * (c / d) is \"\n,\n  \ne\n)\n\n\n\n\n\n\ne\n \n=\n \na\n \n+\n \n(\nb\n \n*\n \nc\n)\n \n/\n \nd\n;\n      \n#  20 + (150/5)\n\n\nprint\n \n(\n\"Value of a + (b * c) / d is \"\n,\n  \ne\n)\n\n\n\n\n\n\nIn case you are using Python 2 and want floating point division (e.g: 4/3 --> 1.33333333333 and not 4/3 --> 1) :\n\n\n \nFor\n \nPython\n \nshell\n \ntype\n \nin\n \n:\n \nfrom\n \n__future__\n \nimport\n \nprint_function\n,\n \ndivision\n\n \nFor\n \na\n \n\".py\"\n \nfile\n \n:\n \nUse\n \nthat\n \nimport\n \nstatement\n \nin\n \nthe\n \nbeginning\n \nof\n \nyour\n \nPython\n \nfile.\n\n\n\n\n\n\nStrings\n\n\n\n\nImmutable\n datatype\n\n\nString enclosed within \n\" String\"\n or \n'String'\n\n\n\n\ncourse_name\n \n=\n \n\"Introduction to Programming\"\n\n\nquestion\n \n=\n \n\"Having a good time ? ;)\"\n\n\nprint\n(\ncourse_name\n)\n\n\nprint\n(\nquestion\n)\n\n\n\n\n\n\nOperations on Strings\n\n\n\n\nSince strings are immutable, we can't change the value stored in a string\n\n\nWe can concatenate ('join') multiple strings.\n\n\nSlice/substring operations\n\n\n\n\nstring_1\n \n=\n \n\"Hello World!\"\n\n\nn\n \n=\n \nlen\n(\nstring_1\n)\n  \n# \"len\" gives us the number of characters in the string\n\n\nprint\n(\nstring_1\n \n+\n \n\" has\"\n,\n \nn\n \n,\n \n\"characters\"\n)\n\n\n\n\n\n\n\n\nIndexing\n : Every charcater of the string can be accessed by it's position in the string.\n\n\nIndexing starts from zero.\n\n\nSyntax\n    string_name[index_number]\n\n\n\n\nExample:    \n\n\nprint\n(\nstring_1\n[\n0\n])\n\n\nprint\n(\nstring_1\n[\n1\n])\n\n\n\n\n\n\nprint\n(\nstring_1\n[\n-\n2\n])\n\n\n\n\n\n\nNegative Indexing:\nstring[-1] gives us the last character\nstring[-2] gives us the second last character\nand so on...\n\n\nSlicing operations\n\n\nSyntax:\n\n\nstring_name[start_index,end_index]\n\n\nprint\n(\nstring_1\n[\n0\n:\n2\n])\n\n\nprint\n(\nstring_1\n[\n5\n \n:\n \nlen\n(\nstring_1\n)])\n\n\n\n\n\n\nprint\n(\nstring_1\n[\n0\n:\n4\n]\n+\nstring_1\n[\n4\n:\nlen\n(\nstring_1\n)])\n\n\n\n\n\n\nLists\n\n\n\n\nInitializing syntax: \\n\n    list_name = [value_1,value_2,...,value_n]\n\n\nBehaviour Similar to strings\n\n\nMutable\n\n\nCan contain multiple data types.\n\n\n\n\nprimes\n \n=\n \n[\n2\n,\n3\n,\n5\n,\n8\n,\n11\n]\n\n\nprint\n(\nprimes\n)\n\n\nprint\n(\nprimes\n[\n0\n])\n\n\nprint\n(\nlen\n(\nprimes\n))\n\n\n\n\n\n\nclassroom\n \n=\n \n[\n'L'\n,\n'T'\n,\n \n1\n]\n\n\nprint\n(\nclassroom\n)\n\n\nprint\n((\nclassroom\n[\n2\n]\n+\n \n4\n))\n\n\n\n\n\n\nWhat to do next?\n\n\n1.Play around in the python interpreter to explore various functionalities\n2.Understand the rules to name variables.",
            "title": "Lecture 1 - DataTypes, Basic Math Operations, Precedence"
        },
        {
            "location": "/lecture-1/#lecture-1-introduction-to-programming",
            "text": "",
            "title": "Lecture 1: Introduction to Programming"
        },
        {
            "location": "/lecture-1/#agenda-for-the-class",
            "text": "Python in-built datatypes  Basic mathematical operators and Precedence order  Python Interpreter vs Python for Scripting   Firstly we'll focus on the  datatypes .\n1.  Numeric \n2.  Strings \n3.  Lists  General format for  Assigning  a variable a value:\nVariable_name = Variable_Value   We  Do not  mention datatype while assigning a variable a value in Python. (i.e. Dynamically Typed)  =  is used to assign a variable a value. ( L Value and R value)  A variable name must follow certain naming conventions. Example: '23', 'len' can  not  be variable names.  There is no such thing as \"variable declaration\" or \"variable initialization\" in Python. It's only variable assignment",
            "title": "Agenda for the Class:"
        },
        {
            "location": "/lecture-1/#numeric-data",
            "text": "a = 1  b = 3.14  # Assigning value 1 to variable a and 3.14 to variable b   Mathematical Operations on Variables:\n1. Add ('+')\n2. Multiply ('*')\n3. Subtract ('-')\n4. Divide ('/') - yields a decimal answer\n5. Divide ('//') - yields an integer quotient\n6. Modulo ('%')\n7. Exponentiation (**)",
            "title": "Numeric data"
        },
        {
            "location": "/lecture-1/#order-of-precedence",
            "text": "Exponent > (Multiple, Divide, Modulo) > (Add, Subtract)  a   =   20  b   =   10  c   =   15  d   =   5  e   =   0   e   =   ( a   +   b )   *   c   /   d         #( 30 * 15 ) / 5  print   ( \"Value of (a + b) * c / d is \" ,    e )   e   =   (( a   +   b )   *   c )   /   d       # (30 * 15 ) / 5  print   ( \"Value of ((a + b) * c) / d is \" ,    e )   e   =   ( a   +   b )   *   ( c   /   d );      # (30) * (15/5)  print   ( \"Value of (a + b) * (c / d) is \" ,    e )   e   =   a   +   ( b   *   c )   /   d ;        #  20 + (150/5)  print   ( \"Value of a + (b * c) / d is \" ,    e )",
            "title": "Order of Precedence"
        },
        {
            "location": "/lecture-1/#in-case-you-are-using-python-2-and-want-floating-point-division-eg-43-133333333333-and-not-43-1",
            "text": "For   Python   shell   type   in   :   from   __future__   import   print_function ,   division \n  For   a   \".py\"   file   :   Use   that   import   statement   in   the   beginning   of   your   Python   file.",
            "title": "In case you are using Python 2 and want floating point division (e.g: 4/3 --&gt; 1.33333333333 and not 4/3 --&gt; 1) :"
        },
        {
            "location": "/lecture-1/#strings",
            "text": "Immutable  datatype  String enclosed within  \" String\"  or  'String'   course_name   =   \"Introduction to Programming\"  question   =   \"Having a good time ? ;)\"  print ( course_name )  print ( question )",
            "title": "Strings"
        },
        {
            "location": "/lecture-1/#operations-on-strings",
            "text": "Since strings are immutable, we can't change the value stored in a string  We can concatenate ('join') multiple strings.  Slice/substring operations   string_1   =   \"Hello World!\"  n   =   len ( string_1 )    # \"len\" gives us the number of characters in the string  print ( string_1   +   \" has\" ,   n   ,   \"characters\" )    Indexing  : Every charcater of the string can be accessed by it's position in the string.  Indexing starts from zero.  Syntax\n    string_name[index_number]   Example:      print ( string_1 [ 0 ])  print ( string_1 [ 1 ])   print ( string_1 [ - 2 ])   Negative Indexing:\nstring[-1] gives us the last character\nstring[-2] gives us the second last character\nand so on...",
            "title": "Operations on Strings"
        },
        {
            "location": "/lecture-1/#slicing-operations",
            "text": "Syntax:  string_name[start_index,end_index]  print ( string_1 [ 0 : 2 ])  print ( string_1 [ 5   :   len ( string_1 )])   print ( string_1 [ 0 : 4 ] + string_1 [ 4 : len ( string_1 )])",
            "title": "Slicing operations"
        },
        {
            "location": "/lecture-1/#lists",
            "text": "Initializing syntax: \\n\n    list_name = [value_1,value_2,...,value_n]  Behaviour Similar to strings  Mutable  Can contain multiple data types.   primes   =   [ 2 , 3 , 5 , 8 , 11 ]  print ( primes )  print ( primes [ 0 ])  print ( len ( primes ))   classroom   =   [ 'L' , 'T' ,   1 ]  print ( classroom )  print (( classroom [ 2 ] +   4 ))",
            "title": "Lists"
        },
        {
            "location": "/lecture-1/#what-to-do-next",
            "text": "1.Play around in the python interpreter to explore various functionalities\n2.Understand the rules to name variables.",
            "title": "What to do next?"
        },
        {
            "location": "/lecture-2/",
            "text": "Introduction to Programming - Lecture 2\n\n\nAgenda for the class\n\n\n\n\nLinux terminal Basics (~20 minutes)\n\n\nLists (~15 minutes)\n\n\nList functions such as append etc.\n\n\nMutability\n\n\nSlicing/len()\n\n\nnested lists\n\n\n\n\n\n\nBasic Input and Output (5-10 minutes) \n\n\nCreating a small program (Remaining time) \n\n\n\n\nLists\n\n\n\n\nA default python datatype.\n\n\nStrings and lists have some similar features, like length, indexing of elements etc.\n\n\nBasic differences from strings are\n\n\nMutability: Lists are mutable whereas strings are not. This basically means we can make changes to lists after initiailizing but we can't do that in strings.\n\n\nLists can have multiple datatypes within them.\n\n\n\n\n\n\n\n\nsquares\n=\n[\n0\n,\n1\n,\n4\n,\n9\n,\n16\n,\n25\n]\n \n#list_name = [value1,value2,value3,...] \n\n\nprint\n(\nsquares\n)\n\n\nprint\n(\n\"Length is:\"\n,\nlen\n(\nsquares\n))\n\n\n\n\n\n\nprint\n(\nsquares\n[\n3\n])\n\n\n\n\n\n\nsquares\n.\nappend\n(\n36\n)\n\n\nprint\n(\nsquares\n)\n\n\n\n\n\n\nsquares\n.\nappend\n(\n\"forty-nine\"\n)\n\n\nprint\n(\nsquares\n)\n\n\n\n\n\n\nsquares\n.\nextend\n([\n64\n,\n81\n])\n\n\nprint\n(\nsquares\n)\n\n\n\n\n\n\nsquares\n[\n7\n]\n=\n49\n\n\nprint\n(\nsquares\n)\n\n\n\n\n\n\nprint\n(\nsquares\n[\n0\n:\n3\n])\n\n\n\n\n\n\n4\n \nin\n \nsquares\n\n\n\n\n\n\nSome other list methods\n\n\n\n\nlist.index(x) \n\n\nlist.count(x)\n\n\nlist.insert(i,x)\n\n\n\n\nLink: https://docs.python.org/3/tutorial/datastructures.html \n\n\nL1\n \n=\n \n[\n \n10\n,\n \n[\n20\n,\n21\n,\n22\n,\n23\n],\n \n30\n,\n \n[\n40\n,\n41\n],\n \n50\n \n]\n\n\nprint\n(\nL1\n)\n\n\n\n\n\n\nprint\n(\nL1\n[\n0\n])\n\n\n\n\n\n\nprint\n(\nL1\n[\n1\n])\n\n\n\n\n\n\nprint\n(\nL1\n[\n0\n][\n0\n])\n \n# L1[0] gives us the first element of the list, which is an integer(10). Since integers cannot be \n\n                \n# indexed like a string or list, we get an error.\n\n\n\n\n\n\nprint\n(\nL1\n[\n1\n][\n0\n])\n\n\n\n\n\n\nInput methods\n\n\nn1\n=\ninput\n(\n\"Enter first number: \"\n)\n\n\nn2\n=\ninput\n(\n\"Enter second number: \"\n)\n\n\n\n\n\n\nsum\n=\nn1\n+\nn2\n\n\nprint\n(\nsum\n)\n\n\n\n\n\n\na\n=\nint\n(\nn1\n)\n\n\nb\n=\nint\n(\nn2\n)\n\n\nsum\n=\na\n+\nb\n\n\nprint\n(\nsum\n)\n\n\n\n\n\n\nnum\n=\n'-3.15'\n\n\npie\n=\nfloat\n(\nnum\n)\n\n\nprint\n(\npie\n)\n\n\n\n\n\n\nShort Assignment 1 :\n\n\nGetting comfortable with list operations is important. Even though the problem can be concisely solved with the\nuse of for loop, since loops haven't been taught yet, you can solve it by a bunch of slicing statements instead.\n\n1. Take a string as input and print it explained by the example below. Given length of string is equal to 12.\n\n   Example\n   --------\n\n   Input : HelloWorlds!\n\n   Output :\n\n   HelloWorlds!\n   Hlools\n   Hlod\n   Hol\n   HWs\n   Ho\n   !sdlroWolleH\n   !drWle\n   !lWl\n   !rl\n   !oe\n   !W\n\n\n2. Take two strings as input and print it as explained by the example below.\n   Total sum length of both strings is 19.\n\n   Example\n   -------\n\n   Input : string1 --> \"DireStraits\", string2 --> \"TheKinks\"\n\n   Output :\n\n   stiartSeriDskniKehT\n   sirSrDsih\n   stDs\n   srs\n   ss",
            "title": "Lecture 2 - Linux, Lists, Basic, Small Program"
        },
        {
            "location": "/lecture-2/#introduction-to-programming-lecture-2",
            "text": "",
            "title": "Introduction to Programming - Lecture 2"
        },
        {
            "location": "/lecture-2/#agenda-for-the-class",
            "text": "Linux terminal Basics (~20 minutes)  Lists (~15 minutes)  List functions such as append etc.  Mutability  Slicing/len()  nested lists    Basic Input and Output (5-10 minutes)   Creating a small program (Remaining time)",
            "title": "Agenda for the class"
        },
        {
            "location": "/lecture-2/#lists",
            "text": "A default python datatype.  Strings and lists have some similar features, like length, indexing of elements etc.  Basic differences from strings are  Mutability: Lists are mutable whereas strings are not. This basically means we can make changes to lists after initiailizing but we can't do that in strings.  Lists can have multiple datatypes within them.     squares = [ 0 , 1 , 4 , 9 , 16 , 25 ]   #list_name = [value1,value2,value3,...]   print ( squares )  print ( \"Length is:\" , len ( squares ))   print ( squares [ 3 ])   squares . append ( 36 )  print ( squares )   squares . append ( \"forty-nine\" )  print ( squares )   squares . extend ([ 64 , 81 ])  print ( squares )   squares [ 7 ] = 49  print ( squares )   print ( squares [ 0 : 3 ])   4   in   squares",
            "title": "Lists"
        },
        {
            "location": "/lecture-2/#some-other-list-methods",
            "text": "list.index(x)   list.count(x)  list.insert(i,x)   Link: https://docs.python.org/3/tutorial/datastructures.html   L1   =   [   10 ,   [ 20 , 21 , 22 , 23 ],   30 ,   [ 40 , 41 ],   50   ]  print ( L1 )   print ( L1 [ 0 ])   print ( L1 [ 1 ])   print ( L1 [ 0 ][ 0 ])   # L1[0] gives us the first element of the list, which is an integer(10). Since integers cannot be  \n                 # indexed like a string or list, we get an error.   print ( L1 [ 1 ][ 0 ])",
            "title": "Some other list methods"
        },
        {
            "location": "/lecture-2/#input-methods",
            "text": "n1 = input ( \"Enter first number: \" )  n2 = input ( \"Enter second number: \" )   sum = n1 + n2  print ( sum )   a = int ( n1 )  b = int ( n2 )  sum = a + b  print ( sum )   num = '-3.15'  pie = float ( num )  print ( pie )",
            "title": "Input methods"
        },
        {
            "location": "/lecture-2/#short-assignment-1",
            "text": "Getting comfortable with list operations is important. Even though the problem can be concisely solved with the\nuse of for loop, since loops haven't been taught yet, you can solve it by a bunch of slicing statements instead.\n\n1. Take a string as input and print it explained by the example below. Given length of string is equal to 12.\n\n   Example\n   --------\n\n   Input : HelloWorlds!\n\n   Output :\n\n   HelloWorlds!\n   Hlools\n   Hlod\n   Hol\n   HWs\n   Ho\n   !sdlroWolleH\n   !drWle\n   !lWl\n   !rl\n   !oe\n   !W\n\n\n2. Take two strings as input and print it as explained by the example below.\n   Total sum length of both strings is 19.\n\n   Example\n   -------\n\n   Input : string1 --> \"DireStraits\", string2 --> \"TheKinks\"\n\n   Output :\n\n   stiartSeriDskniKehT\n   sirSrDsih\n   stDs\n   srs\n   ss",
            "title": "Short Assignment 1 :"
        },
        {
            "location": "/lecture-3/",
            "text": "Introduction to Programming - Lecture 3\n\n\nMaterial covered :\n\n\n1. Conditional statement \"if\" and Logical Operators\n2. For loops\n\n\n\n\n\nIf-else and Logical Operators\n\n\n\"If\" is the simplest conditional statement. It simply checks if an evaluation condition is True and if it is then it executes a certain block of code. The checking is usually done by a logical operator such as --> more than( > ), less than( < ), equal to( == ), not equal to ( != or not), etc\n\n if <condition>:\n     execute statement(s)\n\n\n\n\n\nBinary Logical Operators :\n\n\n1. Greater than ( > )\n2. Less than ( < )\n3. Equal to ( == )\n\n\n\n\n\nUnary Logical Operators :\n\n\n1. ! or not\n\nLet us look at some examples :\n\n\n\n\n\n# Greater than ( > )\n\n\nif\n \n1\n \n>\n \n0\n:\n\n    \nprint\n(\n\"One is more than zero\"\n)\n\n\nelse\n:\n\n    \nprint\n(\n\"BITS Pilani Goa Campus is better than IIT Kanpur\"\n)\n\n\n\n# Less than ( < )\n\n\nif\n \n12\n \n<\n \n42\n:\n\n    \nprint\n(\n\"Yes, 12 is less than 42\"\n)\n\n\nelse\n:\n\n    \nprint\n(\n\"Everyone registered in CTE Python will pass with distinction (90%+ marks)\"\n)\n\n\n\n# Equal to ( == )\n\n\nif\n \n2\n \n+\n \n2\n \n==\n \n4\n:\n\n    \nprint\n(\n\"Two plus Two equals Four\"\n)\n\n\nelse\n:\n\n    \nprint\n(\n\"Lite......\"\n)\n\n\n\n# Not equal to ( != )\n\n\nif\n \n1\n \n!=\n \n0\n:\n\n    \nprint\n(\n\"Sachin\"\n)\n\n\nelse\n:\n\n    \nprint\n(\n\"Kohli\"\n)\n\n\n\n# Inversion operator\n\n\nif\n \nnot\n \n2\n \n+\n \n2\n \n==\n \n4\n:\n\n    \nprint\n(\n\"Lite....\"\n)\n\n\nelse\n:\n\n    \nprint\n(\n\"CTE Python....\"\n)\n\n\n\n\n\n\nChained Conditional\n\n\nif <condition 1> is True:\n    execute <statement(s) > 1\nelif <condition 2> is True:\n    execute <statement(s) > 2\nelif <condition 3> is True:\n    execute <statement(s) > 3\nelif <condition 4> is True:\n    execute <statement(s) > 4\n.\n.\n.\nelse:\n    execute <statement(s)> n\n\n\n\n\n\n#### Let us see an example : \n\n\nif\n \n1\n \n<\n \n0\n:\n\n    \nprint\n(\n1\n,\n \nend\n=\n''\n)\n\n\nelif\n \n2\n \n==\n \n3\n:\n\n    \nprint\n(\n2\n,\n \nend\n=\n''\n)\n\n\nelif\n \nnot\n \n3\n \n==\n \n4\n:\n\n    \nprint\n(\n3\n,\n \nend\n=\n''\n)\n\n\nprint\n(\n\".....Lite\"\n)\n\n\n\n\n\n\nThe condition need not directly involve a logical operator. For example :\n\n\na\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n]\n\n\n\nif\n \nisinstance\n(\na\n,\n \nlist\n):\n\n    \nprint\n(\na\n,\n \n\"is a list !\"\n)\n\n\n\nif\n \n2\n \nin\n \na\n:\n\n    \nprint\n(\n\"Yes, 2 is in \"\n,\n \na\n)\n\n\n\nif\n \n5\n \nnot\n \nin\n \na\n:\n\n    \nprint\n(\n\"No, 5 is not in \"\n,\n \na\n)\n\n\n\n\n\n\nIterations\n\n\nIterative constructs are a key feature of any well developed programming language.\nLooping can be done over an iterable which can be a list, set, dictionary, etc.\nLet us concern ourselves with lists for now.\n\n\n\n\n\nCommon library functions to use in loops :\n\n\nrange\n\n\n Usage : range(start, stop, step)\n\n This library function returns a list which is an arithmetic progression. The default step value is 1.\n\n\n\n\n\nExamples\n\n\nlist\n(\nrange\n(\n0\n,\n \n10\n))\n\n\n\n\n\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\n\nlist\n(\nrange\n(\n-\n4\n,\n \n10\n))\n\n\n\n\n\n\n[-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\n\nlist\n(\nrange\n(\n0\n,\n \n10\n,\n \n3\n))\n\n\n\n\n\n\n[0, 3, 6, 9]\n\n\n\n\n\nlist\n(\nrange\n(\n0\n,\n \n5\n,\n \n-\n6\n))\n\n\n\n\n\n\n[]\n\n\n\n\n\nlist\n(\nrange\n(\n-\n10\n,\n \n10\n,\n \n-\n5\n))\n\n\n\n\n\n\n[]\n\n\n\n\n\nlist\n(\nrange\n(\n10\n,\n \n2\n,\n \n3\n))\n\n\n\n\n\n\n[]\n\n\n\n\n\nlist\n(\nrange\n(\n10\n,\n \n1\n,\n \n-\n2\n))\n\n\n\n\n\n\n[10, 8, 6, 4, 2]\n\n\n\n\n\nenumerate\n\n\n Usage : enumerate(<list>, starting_index=1)\n\n This library function returns an iterable object contains tuples of structure (index, list value at index).\n Extra optional argument provides a different starting index. Default starting index is 0.\n In that case the tuples are of the structure (index, list value at <index - starting_index>)\n\n\n\n\n\nExamples\n\n\nlist\n(\nenumerate\n(\nrange\n(\n0\n,\n5\n)))\n\n\n\n\n\n\n[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]\n\n\n\n\n\nlist\n(\nenumerate\n(\nrange\n(\n0\n,\n5\n),\n \n10\n))\n\n\n\n\n\n\n[(10, 0), (11, 1), (12, 2), (13, 3), (14, 4)]\n\n\n\n\n\nFor Loop\n\n\nStructure\n\n\nfor value in iterable:\n    execute statement(s)\n\nOnly by looking at many examples will this become clear\n\n\n\n\n\na\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n]\n\n\n\nfor\n \nvalue\n \nin\n \na\n:\n\n    \nprint\n(\nvalue\n,\n \nend\n=\n' '\n)\n\n\n\n\n\n\n1 2 3 4 5\n\n\n\n\n\nb\n \n=\n \n[[\n1\n,\n \n2\n,\n \n3\n],\n\n     \n[\n4\n,\n \n5\n,\n \n6\n],\n\n     \n[\n7\n,\n \n8\n,\n \n9\n]]\n\n\nfor\n \nsublist\n \nin\n \nb\n:\n\n    \nfor\n \nvalue\n \nin\n \nsublist\n:\n\n        \nprint\n(\nvalue\n,\n \nend\n=\n' '\n)\n\n\n\n\n\n\n1 2 3 4 5 6 7 8 9\n\n\n\n\n\nTuples\n\n\nTuples are the immutable equivalent of lists.\n\nDeclared by : (value_1, value_2, .....)\n\n\n\n\n\na\n \n=\n \n(\n2\n,\n \n3\n,\n \n4\n)\n\n\nprint\n(\na\n)\n\n\n\n\n\n\n(2, 3, 4)\n\n\n\n\n\nYou cannot change any element of a tuple to a new value since tuples are immutable types. For example :\n\n\na\n[\n1\n]\n \n=\n \n10\n\n\nprint\n(\na\n)\n\n\n\n\n\n\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-5-efd97496539c> in <module>()\n----> 1 a[1] = 10\n      2 print(a)\n\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\n\n\na\n \n=\n \n[\n\"One\"\n,\n \n\"Two\"\n,\n \n\"Three\"\n]\n\n\nfor\n \ni\n,\n \nvalue\n \nin\n \nenumerate\n(\na\n):\n\n    \nprint\n(\n\"Value at index <\"\n,\n \ni\n,\n \n\"> of list<a> is : \"\n,\n \nvalue\n)\n\n\n\n\n\n\nValue at index < 0 > of list<a> is :  One\nValue at index < 1 > of list<a> is :  Two\nValue at index < 2 > of list<a> is :  Three\n\n\n\n\n\nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \n10\n):\n\n    \nfor\n \nj\n \nin\n \nrange\n(\n0\n,\n \ni\n):\n\n        \nprint\n(\n\"*\"\n,\n \nend\n=\n''\n)\n\n    \nprint\n(\n\"\"\n)\n\n\n\n\n\n\n*\n**\n***\n****\n*****\n******\n*******\n********\n*********\n\n\n\n\n\nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \n10\n):\n\n    \nfor\n \nj\n \nin\n \nrange\n(\n10\n,\n \ni\n,\n \n-\n1\n):\n\n        \nprint\n(\n\" \"\n,\n \nend\n=\n''\n)\n\n    \nfor\n \nk\n \nin\n \nrange\n(\n0\n,\n \ni\n):\n\n        \nprint\n(\n\"*\"\n,\n \nend\n=\n''\n)\n\n    \nprint\n(\n\"\"\n)\n\n\n\n\n\n\n         *\n        **\n       ***\n      ****\n     *****\n    ******\n   *******\n  ********\n *********\n\n\n\n\n\nShort in-class assignment\n\n\nWrite a program to print the following pattern.\n\n**********\n****--****\n***----***\n**------**\n*--------*\n**------**\n***----***\n****--****\n**********\n\nFirst line --> 10 stars\nSecond line --> 4 stars ,2 dashes, 4 stars\nThird line --> 3 stars, 4 dashes, 3 stars\n.\n.\n.\nEigth line --> 4 stars ,2 dashes, 4 stars\nNinth line --> 10 stars again.\n\n\n\n\n\nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \n5\n):\n\n    \nfor\n \nj\n \nin\n \nrange\n(\n0\n,\n \n5\n \n-\n \ni\n):\n\n        \nprint\n(\n\"*\"\n,\n \nend\n=\n''\n)\n\n    \nfor\n \nk\n \nin\n \nrange\n(\n0\n,\n \n2\n*\ni\n):\n\n        \nprint\n(\n\"-\"\n,\n \nend\n=\n''\n)\n\n    \nfor\n \nj\n \nin\n \nrange\n(\n0\n,\n \n5\n \n-\n \ni\n):\n\n        \nprint\n(\n\"*\"\n,\n \nend\n=\n''\n)\n\n    \nprint\n(\n\"\"\n)\n\n\n\nfor\n \ni\n \nin\n \nrange\n(\n3\n,\n \n-\n1\n,\n \n-\n1\n):\n\n    \nfor\n \nj\n \nin\n \nrange\n(\n0\n,\n \n5\n \n-\n \ni\n):\n\n        \nprint\n(\n\"*\"\n,\n \nend\n=\n''\n)\n\n    \nfor\n \nk\n \nin\n \nrange\n(\n0\n,\n \n2\n*\ni\n):\n\n        \nprint\n(\n\"-\"\n,\n \nend\n=\n''\n)\n\n    \nfor\n \nj\n \nin\n \nrange\n(\n0\n,\n \n5\n \n-\n \ni\n):\n\n        \nprint\n(\n\"*\"\n,\n \nend\n=\n''\n)\n        \n    \nprint\n(\n\"\"\n)\n\n\n\n\n\n\n**********\n****--****\n***----***\n**------**\n*--------*\n**------**\n***----***\n****--****\n**********",
            "title": "Lecture 3 - Range, Enumerate, For, If, Star-Dash Prog."
        },
        {
            "location": "/lecture-3/#introduction-to-programming-lecture-3",
            "text": "",
            "title": "Introduction to Programming - Lecture 3"
        },
        {
            "location": "/lecture-3/#material-covered",
            "text": "1. Conditional statement \"if\" and Logical Operators\n2. For loops",
            "title": "Material covered :"
        },
        {
            "location": "/lecture-3/#if-else-and-logical-operators",
            "text": "\"If\" is the simplest conditional statement. It simply checks if an evaluation condition is True and if it is then it executes a certain block of code. The checking is usually done by a logical operator such as --> more than( > ), less than( < ), equal to( == ), not equal to ( != or not), etc\n\n if <condition>:\n     execute statement(s)",
            "title": "If-else and Logical Operators"
        },
        {
            "location": "/lecture-3/#binary-logical-operators",
            "text": "1. Greater than ( > )\n2. Less than ( < )\n3. Equal to ( == )",
            "title": "Binary Logical Operators :"
        },
        {
            "location": "/lecture-3/#unary-logical-operators",
            "text": "1. ! or not\n\nLet us look at some examples :  # Greater than ( > )  if   1   >   0 : \n     print ( \"One is more than zero\" )  else : \n     print ( \"BITS Pilani Goa Campus is better than IIT Kanpur\" )  # Less than ( < )  if   12   <   42 : \n     print ( \"Yes, 12 is less than 42\" )  else : \n     print ( \"Everyone registered in CTE Python will pass with distinction (90%+ marks)\" )  # Equal to ( == )  if   2   +   2   ==   4 : \n     print ( \"Two plus Two equals Four\" )  else : \n     print ( \"Lite......\" )  # Not equal to ( != )  if   1   !=   0 : \n     print ( \"Sachin\" )  else : \n     print ( \"Kohli\" )  # Inversion operator  if   not   2   +   2   ==   4 : \n     print ( \"Lite....\" )  else : \n     print ( \"CTE Python....\" )",
            "title": "Unary Logical Operators :"
        },
        {
            "location": "/lecture-3/#chained-conditional",
            "text": "if <condition 1> is True:\n    execute <statement(s) > 1\nelif <condition 2> is True:\n    execute <statement(s) > 2\nelif <condition 3> is True:\n    execute <statement(s) > 3\nelif <condition 4> is True:\n    execute <statement(s) > 4\n.\n.\n.\nelse:\n    execute <statement(s)> n  #### Let us see an example :   if   1   <   0 : \n     print ( 1 ,   end = '' )  elif   2   ==   3 : \n     print ( 2 ,   end = '' )  elif   not   3   ==   4 : \n     print ( 3 ,   end = '' )  print ( \".....Lite\" )",
            "title": "Chained Conditional"
        },
        {
            "location": "/lecture-3/#the-condition-need-not-directly-involve-a-logical-operator-for-example",
            "text": "a   =   [ 1 ,   2 ,   3 ]  if   isinstance ( a ,   list ): \n     print ( a ,   \"is a list !\" )  if   2   in   a : \n     print ( \"Yes, 2 is in \" ,   a )  if   5   not   in   a : \n     print ( \"No, 5 is not in \" ,   a )",
            "title": "The condition need not directly involve a logical operator. For example :"
        },
        {
            "location": "/lecture-3/#iterations",
            "text": "Iterative constructs are a key feature of any well developed programming language.\nLooping can be done over an iterable which can be a list, set, dictionary, etc.\nLet us concern ourselves with lists for now.",
            "title": "Iterations"
        },
        {
            "location": "/lecture-3/#common-library-functions-to-use-in-loops",
            "text": "",
            "title": "Common library functions to use in loops :"
        },
        {
            "location": "/lecture-3/#range",
            "text": "Usage : range(start, stop, step)\n\n This library function returns a list which is an arithmetic progression. The default step value is 1.",
            "title": "range"
        },
        {
            "location": "/lecture-3/#examples",
            "text": "list ( range ( 0 ,   10 ))   [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]  list ( range ( - 4 ,   10 ))   [-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]  list ( range ( 0 ,   10 ,   3 ))   [0, 3, 6, 9]  list ( range ( 0 ,   5 ,   - 6 ))   []  list ( range ( - 10 ,   10 ,   - 5 ))   []  list ( range ( 10 ,   2 ,   3 ))   []  list ( range ( 10 ,   1 ,   - 2 ))   [10, 8, 6, 4, 2]",
            "title": "Examples"
        },
        {
            "location": "/lecture-3/#enumerate",
            "text": "Usage : enumerate(<list>, starting_index=1)\n\n This library function returns an iterable object contains tuples of structure (index, list value at index).\n Extra optional argument provides a different starting index. Default starting index is 0.\n In that case the tuples are of the structure (index, list value at <index - starting_index>)",
            "title": "enumerate"
        },
        {
            "location": "/lecture-3/#examples_1",
            "text": "list ( enumerate ( range ( 0 , 5 )))   [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]  list ( enumerate ( range ( 0 , 5 ),   10 ))   [(10, 0), (11, 1), (12, 2), (13, 3), (14, 4)]",
            "title": "Examples"
        },
        {
            "location": "/lecture-3/#for-loop",
            "text": "",
            "title": "For Loop"
        },
        {
            "location": "/lecture-3/#structure",
            "text": "for value in iterable:\n    execute statement(s)\n\nOnly by looking at many examples will this become clear  a   =   [ 1 ,   2 ,   3 ,   4 ,   5 ]  for   value   in   a : \n     print ( value ,   end = ' ' )   1 2 3 4 5  b   =   [[ 1 ,   2 ,   3 ], \n      [ 4 ,   5 ,   6 ], \n      [ 7 ,   8 ,   9 ]]  for   sublist   in   b : \n     for   value   in   sublist : \n         print ( value ,   end = ' ' )   1 2 3 4 5 6 7 8 9",
            "title": "Structure"
        },
        {
            "location": "/lecture-3/#tuples",
            "text": "Tuples are the immutable equivalent of lists.\n\nDeclared by : (value_1, value_2, .....)  a   =   ( 2 ,   3 ,   4 )  print ( a )   (2, 3, 4)",
            "title": "Tuples"
        },
        {
            "location": "/lecture-3/#you-cannot-change-any-element-of-a-tuple-to-a-new-value-since-tuples-are-immutable-types-for-example",
            "text": "a [ 1 ]   =   10  print ( a )   ---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-5-efd97496539c> in <module>()\n----> 1 a[1] = 10\n      2 print(a)\n\n\nTypeError: 'tuple' object does not support item assignment  a   =   [ \"One\" ,   \"Two\" ,   \"Three\" ]  for   i ,   value   in   enumerate ( a ): \n     print ( \"Value at index <\" ,   i ,   \"> of list<a> is : \" ,   value )   Value at index < 0 > of list<a> is :  One\nValue at index < 1 > of list<a> is :  Two\nValue at index < 2 > of list<a> is :  Three  for   i   in   range ( 0 ,   10 ): \n     for   j   in   range ( 0 ,   i ): \n         print ( \"*\" ,   end = '' ) \n     print ( \"\" )   *\n**\n***\n****\n*****\n******\n*******\n********\n*********  for   i   in   range ( 0 ,   10 ): \n     for   j   in   range ( 10 ,   i ,   - 1 ): \n         print ( \" \" ,   end = '' ) \n     for   k   in   range ( 0 ,   i ): \n         print ( \"*\" ,   end = '' ) \n     print ( \"\" )            *\n        **\n       ***\n      ****\n     *****\n    ******\n   *******\n  ********\n *********",
            "title": "You cannot change any element of a tuple to a new value since tuples are immutable types. For example :"
        },
        {
            "location": "/lecture-3/#short-in-class-assignment",
            "text": "Write a program to print the following pattern.\n\n**********\n****--****\n***----***\n**------**\n*--------*\n**------**\n***----***\n****--****\n**********\n\nFirst line --> 10 stars\nSecond line --> 4 stars ,2 dashes, 4 stars\nThird line --> 3 stars, 4 dashes, 3 stars\n.\n.\n.\nEigth line --> 4 stars ,2 dashes, 4 stars\nNinth line --> 10 stars again.  for   i   in   range ( 0 ,   5 ): \n     for   j   in   range ( 0 ,   5   -   i ): \n         print ( \"*\" ,   end = '' ) \n     for   k   in   range ( 0 ,   2 * i ): \n         print ( \"-\" ,   end = '' ) \n     for   j   in   range ( 0 ,   5   -   i ): \n         print ( \"*\" ,   end = '' ) \n     print ( \"\" )  for   i   in   range ( 3 ,   - 1 ,   - 1 ): \n     for   j   in   range ( 0 ,   5   -   i ): \n         print ( \"*\" ,   end = '' ) \n     for   k   in   range ( 0 ,   2 * i ): \n         print ( \"-\" ,   end = '' ) \n     for   j   in   range ( 0 ,   5   -   i ): \n         print ( \"*\" ,   end = '' )         \n     print ( \"\" )   **********\n****--****\n***----***\n**------**\n*--------*\n**------**\n***----***\n****--****\n**********",
            "title": "Short in-class assignment"
        },
        {
            "location": "/lecture-3/",
            "text": "Introduction to Programming - Lecture 3\n\n\nMaterial covered :\n\n\n1. Conditional statement \"if\" and Logical Operators\n2. For loops\n\n\n\n\n\nIf-else and Logical Operators\n\n\n\"If\" is the simplest conditional statement. It simply checks if an evaluation condition is True and if it is then it executes a certain block of code. The checking is usually done by a logical operator such as --> more than( > ), less than( < ), equal to( == ), not equal to ( != or not), etc\n\n if <condition>:\n     execute statement(s)\n\n\n\n\n\nBinary Logical Operators :\n\n\n1. Greater than ( > )\n2. Less than ( < )\n3. Equal to ( == )\n\n\n\n\n\nUnary Logical Operators :\n\n\n1. ! or not\n\nLet us look at some examples :\n\n\n\n\n\n# Greater than ( > )\n\n\nif\n \n1\n \n>\n \n0\n:\n\n    \nprint\n(\n\"One is more than zero\"\n)\n\n\nelse\n:\n\n    \nprint\n(\n\"BITS Pilani Goa Campus is better than IIT Kanpur\"\n)\n\n\n\n# Less than ( < )\n\n\nif\n \n12\n \n<\n \n42\n:\n\n    \nprint\n(\n\"Yes, 12 is less than 42\"\n)\n\n\nelse\n:\n\n    \nprint\n(\n\"Everyone registered in CTE Python will pass with distinction (90%+ marks)\"\n)\n\n\n\n# Equal to ( == )\n\n\nif\n \n2\n \n+\n \n2\n \n==\n \n4\n:\n\n    \nprint\n(\n\"Two plus Two equals Four\"\n)\n\n\nelse\n:\n\n    \nprint\n(\n\"Lite......\"\n)\n\n\n\n# Not equal to ( != )\n\n\nif\n \n1\n \n!=\n \n0\n:\n\n    \nprint\n(\n\"Sachin\"\n)\n\n\nelse\n:\n\n    \nprint\n(\n\"Kohli\"\n)\n\n\n\n# Inversion operator\n\n\nif\n \nnot\n \n2\n \n+\n \n2\n \n==\n \n4\n:\n\n    \nprint\n(\n\"Lite....\"\n)\n\n\nelse\n:\n\n    \nprint\n(\n\"CTE Python....\"\n)\n\n\n\n\n\n\nChained Conditional\n\n\nif <condition 1> is True:\n    execute <statement(s) > 1\nelif <condition 2> is True:\n    execute <statement(s) > 2\nelif <condition 3> is True:\n    execute <statement(s) > 3\nelif <condition 4> is True:\n    execute <statement(s) > 4\n.\n.\n.\nelse:\n    execute <statement(s)> n\n\n\n\n\n\n#### Let us see an example : \n\n\nif\n \n1\n \n<\n \n0\n:\n\n    \nprint\n(\n1\n,\n \nend\n=\n''\n)\n\n\nelif\n \n2\n \n==\n \n3\n:\n\n    \nprint\n(\n2\n,\n \nend\n=\n''\n)\n\n\nelif\n \nnot\n \n3\n \n==\n \n4\n:\n\n    \nprint\n(\n3\n,\n \nend\n=\n''\n)\n\n\nprint\n(\n\".....Lite\"\n)\n\n\n\n\n\n\nThe condition need not directly involve a logical operator. For example :\n\n\na\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n]\n\n\n\nif\n \nisinstance\n(\na\n,\n \nlist\n):\n\n    \nprint\n(\na\n,\n \n\"is a list !\"\n)\n\n\n\nif\n \n2\n \nin\n \na\n:\n\n    \nprint\n(\n\"Yes, 2 is in \"\n,\n \na\n)\n\n\n\nif\n \n5\n \nnot\n \nin\n \na\n:\n\n    \nprint\n(\n\"No, 5 is not in \"\n,\n \na\n)\n\n\n\n\n\n\nIterations\n\n\nIterative constructs are a key feature of any well developed programming language.\nLooping can be done over an iterable which can be a list, set, dictionary, etc.\nLet us concern ourselves with lists for now.\n\n\n\n\n\nCommon library functions to use in loops :\n\n\nrange\n\n\n Usage : range(start, stop, step)\n\n This library function returns a list which is an arithmetic progression. The default step value is 1.\n\n\n\n\n\nExamples\n\n\nlist\n(\nrange\n(\n0\n,\n \n10\n))\n\n\n\n\n\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\n\nlist\n(\nrange\n(\n-\n4\n,\n \n10\n))\n\n\n\n\n\n\n[-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\n\nlist\n(\nrange\n(\n0\n,\n \n10\n,\n \n3\n))\n\n\n\n\n\n\n[0, 3, 6, 9]\n\n\n\n\n\nlist\n(\nrange\n(\n0\n,\n \n5\n,\n \n-\n6\n))\n\n\n\n\n\n\n[]\n\n\n\n\n\nlist\n(\nrange\n(\n-\n10\n,\n \n10\n,\n \n-\n5\n))\n\n\n\n\n\n\n[]\n\n\n\n\n\nlist\n(\nrange\n(\n10\n,\n \n2\n,\n \n3\n))\n\n\n\n\n\n\n[]\n\n\n\n\n\nlist\n(\nrange\n(\n10\n,\n \n1\n,\n \n-\n2\n))\n\n\n\n\n\n\n[10, 8, 6, 4, 2]\n\n\n\n\n\nenumerate\n\n\n Usage : enumerate(<list>, starting_index=1)\n\n This library function returns an iterable object contains tuples of structure (index, list value at index).\n Extra optional argument provides a different starting index. Default starting index is 0.\n In that case the tuples are of the structure (index, list value at <index - starting_index>)\n\n\n\n\n\nExamples\n\n\nlist\n(\nenumerate\n(\nrange\n(\n0\n,\n5\n)))\n\n\n\n\n\n\n[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]\n\n\n\n\n\nlist\n(\nenumerate\n(\nrange\n(\n0\n,\n5\n),\n \n10\n))\n\n\n\n\n\n\n[(10, 0), (11, 1), (12, 2), (13, 3), (14, 4)]\n\n\n\n\n\nFor Loop\n\n\nStructure\n\n\nfor value in iterable:\n    execute statement(s)\n\nOnly by looking at many examples will this become clear\n\n\n\n\n\na\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n]\n\n\n\nfor\n \nvalue\n \nin\n \na\n:\n\n    \nprint\n(\nvalue\n,\n \nend\n=\n' '\n)\n\n\n\n\n\n\n1 2 3 4 5\n\n\n\n\n\nb\n \n=\n \n[[\n1\n,\n \n2\n,\n \n3\n],\n\n     \n[\n4\n,\n \n5\n,\n \n6\n],\n\n     \n[\n7\n,\n \n8\n,\n \n9\n]]\n\n\nfor\n \nsublist\n \nin\n \nb\n:\n\n    \nfor\n \nvalue\n \nin\n \nsublist\n:\n\n        \nprint\n(\nvalue\n,\n \nend\n=\n' '\n)\n\n\n\n\n\n\n1 2 3 4 5 6 7 8 9\n\n\n\n\n\nTuples\n\n\nTuples are the immutable equivalent of lists.\n\nDeclared by : (value_1, value_2, .....)\n\n\n\n\n\na\n \n=\n \n(\n2\n,\n \n3\n,\n \n4\n)\n\n\nprint\n(\na\n)\n\n\n\n\n\n\n(2, 3, 4)\n\n\n\n\n\nYou cannot change any element of a tuple to a new value since tuples are immutable types. For example :\n\n\na\n[\n1\n]\n \n=\n \n10\n\n\nprint\n(\na\n)\n\n\n\n\n\n\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-5-efd97496539c> in <module>()\n----> 1 a[1] = 10\n      2 print(a)\n\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\n\n\na\n \n=\n \n[\n\"One\"\n,\n \n\"Two\"\n,\n \n\"Three\"\n]\n\n\nfor\n \ni\n,\n \nvalue\n \nin\n \nenumerate\n(\na\n):\n\n    \nprint\n(\n\"Value at index <\"\n,\n \ni\n,\n \n\"> of list<a> is : \"\n,\n \nvalue\n)\n\n\n\n\n\n\nValue at index < 0 > of list<a> is :  One\nValue at index < 1 > of list<a> is :  Two\nValue at index < 2 > of list<a> is :  Three\n\n\n\n\n\nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \n10\n):\n\n    \nfor\n \nj\n \nin\n \nrange\n(\n0\n,\n \ni\n):\n\n        \nprint\n(\n\"*\"\n,\n \nend\n=\n''\n)\n\n    \nprint\n(\n\"\"\n)\n\n\n\n\n\n\n*\n**\n***\n****\n*****\n******\n*******\n********\n*********\n\n\n\n\n\nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \n10\n):\n\n    \nfor\n \nj\n \nin\n \nrange\n(\n10\n,\n \ni\n,\n \n-\n1\n):\n\n        \nprint\n(\n\" \"\n,\n \nend\n=\n''\n)\n\n    \nfor\n \nk\n \nin\n \nrange\n(\n0\n,\n \ni\n):\n\n        \nprint\n(\n\"*\"\n,\n \nend\n=\n''\n)\n\n    \nprint\n(\n\"\"\n)\n\n\n\n\n\n\n         *\n        **\n       ***\n      ****\n     *****\n    ******\n   *******\n  ********\n *********\n\n\n\n\n\nShort in-class assignment\n\n\nWrite a program to print the following pattern.\n\n**********\n****--****\n***----***\n**------**\n*--------*\n**------**\n***----***\n****--****\n**********\n\nFirst line --> 10 stars\nSecond line --> 4 stars ,2 dashes, 4 stars\nThird line --> 3 stars, 4 dashes, 3 stars\n.\n.\n.\nEigth line --> 4 stars ,2 dashes, 4 stars\nNinth line --> 10 stars again.\n\n\n\n\n\nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \n5\n):\n\n    \nfor\n \nj\n \nin\n \nrange\n(\n0\n,\n \n5\n \n-\n \ni\n):\n\n        \nprint\n(\n\"*\"\n,\n \nend\n=\n''\n)\n\n    \nfor\n \nk\n \nin\n \nrange\n(\n0\n,\n \n2\n*\ni\n):\n\n        \nprint\n(\n\"-\"\n,\n \nend\n=\n''\n)\n\n    \nfor\n \nj\n \nin\n \nrange\n(\n0\n,\n \n5\n \n-\n \ni\n):\n\n        \nprint\n(\n\"*\"\n,\n \nend\n=\n''\n)\n\n    \nprint\n(\n\"\"\n)\n\n\n\nfor\n \ni\n \nin\n \nrange\n(\n3\n,\n \n-\n1\n,\n \n-\n1\n):\n\n    \nfor\n \nj\n \nin\n \nrange\n(\n0\n,\n \n5\n \n-\n \ni\n):\n\n        \nprint\n(\n\"*\"\n,\n \nend\n=\n''\n)\n\n    \nfor\n \nk\n \nin\n \nrange\n(\n0\n,\n \n2\n*\ni\n):\n\n        \nprint\n(\n\"-\"\n,\n \nend\n=\n''\n)\n\n    \nfor\n \nj\n \nin\n \nrange\n(\n0\n,\n \n5\n \n-\n \ni\n):\n\n        \nprint\n(\n\"*\"\n,\n \nend\n=\n''\n)\n        \n    \nprint\n(\n\"\"\n)\n\n\n\n\n\n\n**********\n****--****\n***----***\n**------**\n*--------*\n**------**\n***----***\n****--****\n**********",
            "title": "Lecture 4 - List Comprehensions, Dictionaries."
        },
        {
            "location": "/lecture-3/#introduction-to-programming-lecture-3",
            "text": "",
            "title": "Introduction to Programming - Lecture 3"
        },
        {
            "location": "/lecture-3/#material-covered",
            "text": "1. Conditional statement \"if\" and Logical Operators\n2. For loops",
            "title": "Material covered :"
        },
        {
            "location": "/lecture-3/#if-else-and-logical-operators",
            "text": "\"If\" is the simplest conditional statement. It simply checks if an evaluation condition is True and if it is then it executes a certain block of code. The checking is usually done by a logical operator such as --> more than( > ), less than( < ), equal to( == ), not equal to ( != or not), etc\n\n if <condition>:\n     execute statement(s)",
            "title": "If-else and Logical Operators"
        },
        {
            "location": "/lecture-3/#binary-logical-operators",
            "text": "1. Greater than ( > )\n2. Less than ( < )\n3. Equal to ( == )",
            "title": "Binary Logical Operators :"
        },
        {
            "location": "/lecture-3/#unary-logical-operators",
            "text": "1. ! or not\n\nLet us look at some examples :  # Greater than ( > )  if   1   >   0 : \n     print ( \"One is more than zero\" )  else : \n     print ( \"BITS Pilani Goa Campus is better than IIT Kanpur\" )  # Less than ( < )  if   12   <   42 : \n     print ( \"Yes, 12 is less than 42\" )  else : \n     print ( \"Everyone registered in CTE Python will pass with distinction (90%+ marks)\" )  # Equal to ( == )  if   2   +   2   ==   4 : \n     print ( \"Two plus Two equals Four\" )  else : \n     print ( \"Lite......\" )  # Not equal to ( != )  if   1   !=   0 : \n     print ( \"Sachin\" )  else : \n     print ( \"Kohli\" )  # Inversion operator  if   not   2   +   2   ==   4 : \n     print ( \"Lite....\" )  else : \n     print ( \"CTE Python....\" )",
            "title": "Unary Logical Operators :"
        },
        {
            "location": "/lecture-3/#chained-conditional",
            "text": "if <condition 1> is True:\n    execute <statement(s) > 1\nelif <condition 2> is True:\n    execute <statement(s) > 2\nelif <condition 3> is True:\n    execute <statement(s) > 3\nelif <condition 4> is True:\n    execute <statement(s) > 4\n.\n.\n.\nelse:\n    execute <statement(s)> n  #### Let us see an example :   if   1   <   0 : \n     print ( 1 ,   end = '' )  elif   2   ==   3 : \n     print ( 2 ,   end = '' )  elif   not   3   ==   4 : \n     print ( 3 ,   end = '' )  print ( \".....Lite\" )",
            "title": "Chained Conditional"
        },
        {
            "location": "/lecture-3/#the-condition-need-not-directly-involve-a-logical-operator-for-example",
            "text": "a   =   [ 1 ,   2 ,   3 ]  if   isinstance ( a ,   list ): \n     print ( a ,   \"is a list !\" )  if   2   in   a : \n     print ( \"Yes, 2 is in \" ,   a )  if   5   not   in   a : \n     print ( \"No, 5 is not in \" ,   a )",
            "title": "The condition need not directly involve a logical operator. For example :"
        },
        {
            "location": "/lecture-3/#iterations",
            "text": "Iterative constructs are a key feature of any well developed programming language.\nLooping can be done over an iterable which can be a list, set, dictionary, etc.\nLet us concern ourselves with lists for now.",
            "title": "Iterations"
        },
        {
            "location": "/lecture-3/#common-library-functions-to-use-in-loops",
            "text": "",
            "title": "Common library functions to use in loops :"
        },
        {
            "location": "/lecture-3/#range",
            "text": "Usage : range(start, stop, step)\n\n This library function returns a list which is an arithmetic progression. The default step value is 1.",
            "title": "range"
        },
        {
            "location": "/lecture-3/#examples",
            "text": "list ( range ( 0 ,   10 ))   [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]  list ( range ( - 4 ,   10 ))   [-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]  list ( range ( 0 ,   10 ,   3 ))   [0, 3, 6, 9]  list ( range ( 0 ,   5 ,   - 6 ))   []  list ( range ( - 10 ,   10 ,   - 5 ))   []  list ( range ( 10 ,   2 ,   3 ))   []  list ( range ( 10 ,   1 ,   - 2 ))   [10, 8, 6, 4, 2]",
            "title": "Examples"
        },
        {
            "location": "/lecture-3/#enumerate",
            "text": "Usage : enumerate(<list>, starting_index=1)\n\n This library function returns an iterable object contains tuples of structure (index, list value at index).\n Extra optional argument provides a different starting index. Default starting index is 0.\n In that case the tuples are of the structure (index, list value at <index - starting_index>)",
            "title": "enumerate"
        },
        {
            "location": "/lecture-3/#examples_1",
            "text": "list ( enumerate ( range ( 0 , 5 )))   [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]  list ( enumerate ( range ( 0 , 5 ),   10 ))   [(10, 0), (11, 1), (12, 2), (13, 3), (14, 4)]",
            "title": "Examples"
        },
        {
            "location": "/lecture-3/#for-loop",
            "text": "",
            "title": "For Loop"
        },
        {
            "location": "/lecture-3/#structure",
            "text": "for value in iterable:\n    execute statement(s)\n\nOnly by looking at many examples will this become clear  a   =   [ 1 ,   2 ,   3 ,   4 ,   5 ]  for   value   in   a : \n     print ( value ,   end = ' ' )   1 2 3 4 5  b   =   [[ 1 ,   2 ,   3 ], \n      [ 4 ,   5 ,   6 ], \n      [ 7 ,   8 ,   9 ]]  for   sublist   in   b : \n     for   value   in   sublist : \n         print ( value ,   end = ' ' )   1 2 3 4 5 6 7 8 9",
            "title": "Structure"
        },
        {
            "location": "/lecture-3/#tuples",
            "text": "Tuples are the immutable equivalent of lists.\n\nDeclared by : (value_1, value_2, .....)  a   =   ( 2 ,   3 ,   4 )  print ( a )   (2, 3, 4)",
            "title": "Tuples"
        },
        {
            "location": "/lecture-3/#you-cannot-change-any-element-of-a-tuple-to-a-new-value-since-tuples-are-immutable-types-for-example",
            "text": "a [ 1 ]   =   10  print ( a )   ---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\n<ipython-input-5-efd97496539c> in <module>()\n----> 1 a[1] = 10\n      2 print(a)\n\n\nTypeError: 'tuple' object does not support item assignment  a   =   [ \"One\" ,   \"Two\" ,   \"Three\" ]  for   i ,   value   in   enumerate ( a ): \n     print ( \"Value at index <\" ,   i ,   \"> of list<a> is : \" ,   value )   Value at index < 0 > of list<a> is :  One\nValue at index < 1 > of list<a> is :  Two\nValue at index < 2 > of list<a> is :  Three  for   i   in   range ( 0 ,   10 ): \n     for   j   in   range ( 0 ,   i ): \n         print ( \"*\" ,   end = '' ) \n     print ( \"\" )   *\n**\n***\n****\n*****\n******\n*******\n********\n*********  for   i   in   range ( 0 ,   10 ): \n     for   j   in   range ( 10 ,   i ,   - 1 ): \n         print ( \" \" ,   end = '' ) \n     for   k   in   range ( 0 ,   i ): \n         print ( \"*\" ,   end = '' ) \n     print ( \"\" )            *\n        **\n       ***\n      ****\n     *****\n    ******\n   *******\n  ********\n *********",
            "title": "You cannot change any element of a tuple to a new value since tuples are immutable types. For example :"
        },
        {
            "location": "/lecture-3/#short-in-class-assignment",
            "text": "Write a program to print the following pattern.\n\n**********\n****--****\n***----***\n**------**\n*--------*\n**------**\n***----***\n****--****\n**********\n\nFirst line --> 10 stars\nSecond line --> 4 stars ,2 dashes, 4 stars\nThird line --> 3 stars, 4 dashes, 3 stars\n.\n.\n.\nEigth line --> 4 stars ,2 dashes, 4 stars\nNinth line --> 10 stars again.  for   i   in   range ( 0 ,   5 ): \n     for   j   in   range ( 0 ,   5   -   i ): \n         print ( \"*\" ,   end = '' ) \n     for   k   in   range ( 0 ,   2 * i ): \n         print ( \"-\" ,   end = '' ) \n     for   j   in   range ( 0 ,   5   -   i ): \n         print ( \"*\" ,   end = '' ) \n     print ( \"\" )  for   i   in   range ( 3 ,   - 1 ,   - 1 ): \n     for   j   in   range ( 0 ,   5   -   i ): \n         print ( \"*\" ,   end = '' ) \n     for   k   in   range ( 0 ,   2 * i ): \n         print ( \"-\" ,   end = '' ) \n     for   j   in   range ( 0 ,   5   -   i ): \n         print ( \"*\" ,   end = '' )         \n     print ( \"\" )   **********\n****--****\n***----***\n**------**\n*--------*\n**------**\n***----***\n****--****\n**********",
            "title": "Short in-class assignment"
        },
        {
            "location": "/ps1/",
            "text": "Practice Questions\n\n\n1. Take two input strings and print out every odd indexed character of first string and then\n   followed by even indexed characters of the second string.\n\n   Input\n   -----\n\n   string1 <--- \"abcdefghi\"\n   string2 <--- \"jklmnopqr\"\n\n   Output\n   ------\n\n   bdfhjlnpr\n\n\n\n\n2. Take two input strings and construct a new string using list comprehension and join operation.\n   The new string should be constructed such that if character at index `i` is uppercase for string1\n   then choose it, if not then choose character at index `i` of string2. Whatever character you put in\n   should be an uppercase character so make sure you coerce it to one.\n   Assume that both input strings are of equal length.\n   Use Google to find out what you don't know. Remember we won't be spoonfeeding....and even\n   if we want to, it's near impossible to do it.\n\n    Input\n    -----\n    string1 <--- \"ABCDEF\"\n    string2 <--- \"jKlmno\"\n\n    string1 <--- \"abcdef\"\n    string2 <--- \"jklmno\"\n\n    string1 <--- \"AbCDEfghI\"\n    string2 <--- \"jKlmnoPQR\"\n    Output\n    ------\n\n    ABCDEF\n    JKLMNO\n    AKCDEOPQI\n\n\n3. Accept four numbers as input namely -> length, breadth, height of a cube and N. The output should\n   be a dictionary of vertices whose manhattan distance from (0, 0, 0) is less than N.\n\n   Do this using comprehension/generator expression.\n\n   Example of dict comprehension \n   -----------------------------\n   words = [\"one\", \"two\", \"three\"]\n\n   dict = {i + 1 : word for i, word in enumerate(words)}\n   dict = {(x, y, z) : man...distance for i........... if man....}\n   Input\n   -----\n   Enter length : 5\n   Enter breadth : 5\n   Enter height : 5\n   Enter N : 10\n\n   Enter length : 2\n   Enter breadth : 5\n   Enter height : 3\n   Enter N : 7\n\n   Output\n   ------\n   {(0, 0, 5): 5, (0, 0, 0): 0, (5, 0, 0): 5, (0, 5, 0): 5}\n   {(0, 0, 0): 0, (2, 0, 3): 5, (0, 5, 0): 5, (0, 0, 3): 3, (2, 0, 0): 2}\n\n\n\n\n4. Print out the spiral traversal of a given matrix. You don't need to take it as input.\n   Just set it directly in the code. Assume it's a square matrix with odd number of rows/columns.\n\n   Remember Python doesn't have matrix natively so assume as list of lists for now.\n\n   Note : To get number of rows : len(matrix_name)\n          To get number of columns : len(matrix_name[0])     \n   Test cases\n   ----------\n   a = [[1]]\n   b = [[1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]]\n   c = [[1,   2,  3,  4,  5],\n        [6,   7,  8,  9, 10],\n        [11, 12, 13, 14, 15],\n        [16, 17, 18, 19, 20],\n        [21, 22, 23, 24, 25]]\n   Output\n   ------\n   a --> 1,\n   b --> 1, 2, 3, 6, 9, 8, 7, 4, 5,\n   c --> 1, 2, 3, 4, 5, 10, 15, 20, 25, 24, 23, 22, 21, 16, 11, 6, 7, 8, 9, 14, 19, 18, 17, 12, 13,\n\n\n\n\n\nSolutions\n\n\ns1\n \n=\n \ninput\n(\n\"Enter string 1 : \"\n)\n\n\ns2\n \n=\n \ninput\n(\n\"Enter string 2 : \"\n)\n\n\nprint\n(\ns1\n[\n1\n::\n2\n]\n \n+\n \ns2\n[::\n2\n])\n\n\n\n\n\n\ns1\n \n=\n \ninput\n(\n\"Enter string 1 : \"\n)\n\n\ns2\n \n=\n \ninput\n(\n\"Enter string 2 : \"\n)\n\n\n\nif\n \nlen\n(\ns1\n)\n \n<\n \nlen\n(\ns2\n):\n\n    \nmin_length\n \n=\n \nlen\n(\ns1\n)\n\n\nelse\n:\n\n    \nmin_length\n \n=\n \nlen\n(\ns2\n)\n\n\n\n\"\"\n.\njoin\n([\ns1\n[\ni\n]\n \nif\n \ns1\n[\ni\n]\n.\nisupper\n()\n \nelse\n \ns2\n[\ni\n]\n.\nupper\n()\n \nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \nmin_length\n)])\n\n\n\n\n\n\nl\n \n=\n \ninput\n(\n\"Enter length : \"\n)\n\n\nb\n \n=\n \ninput\n(\n\"Enter breadth : \"\n)\n\n\nh\n \n=\n \ninput\n(\n\"Enter height : \"\n)\n\n\nN\n \n=\n \ninput\n(\n\"Enter N : \"\n)\n\n\n\nb\n \n=\n \n{(\ni\n,\n \nj\n,\n \nk\n)\n \n:\n \nabs\n(\ni\n)\n \n+\n \nabs\n(\nj\n)\n \n+\n \nabs\n(\nk\n)\n \n     \nfor\n \ni\n \nin\n \n[\n0\n,\n \nint\n(\nl\n)]\n\n     \nfor\n \nj\n \nin\n \n[\n0\n,\n \nint\n(\nb\n)]\n\n     \nfor\n \nk\n \nin\n \n[\n0\n,\n \nint\n(\nh\n)]\n\n     \nif\n \nabs\n(\ni\n)\n \n+\n \nabs\n(\nj\n)\n \n+\n \nabs\n(\nk\n)\n \n<\n \nint\n(\nN\n)}\n\n\nprint\n(\nb\n)\n\n\n\n\n\n\na\n \n=\n \n[[\n1\n]]\n\n\n\nb\n \n=\n \n[[\n1\n,\n \n2\n,\n \n3\n],\n\n     \n[\n4\n,\n \n5\n,\n \n6\n],\n\n     \n[\n7\n,\n \n8\n,\n \n9\n]]\n\n\nc\n \n=\n \n[[\n1\n,\n   \n2\n,\n  \n3\n,\n  \n4\n,\n  \n5\n],\n\n     \n[\n6\n,\n   \n7\n,\n  \n8\n,\n  \n9\n,\n \n10\n],\n\n     \n[\n11\n,\n \n12\n,\n \n13\n,\n \n14\n,\n \n15\n],\n\n     \n[\n16\n,\n \n17\n,\n \n18\n,\n \n19\n,\n \n20\n],\n\n     \n[\n21\n,\n \n22\n,\n \n23\n,\n \n24\n,\n \n25\n]]\n\n\n\ndef\n \nspiral\n(\nA\n):\n\n    \nn\n \n=\n \nlen\n(\nA\n)\n\n    \nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \nn\n \n//\n \n2\n \n+\n \n1\n):\n\n        \nfor\n \nj\n \nin\n \nrange\n(\ni\n,\n \nn\n \n-\n \ni\n):\n\n            \nprint\n(\nA\n[\ni\n][\nj\n],\n \nend\n=\n', '\n)\n\n        \nfor\n \nj\n \nin\n \nrange\n(\ni\n \n+\n \n1\n,\n \nn\n \n-\n \ni\n):\n\n            \nprint\n(\nA\n[\nj\n][\nn\n \n-\n \ni\n \n-\n \n1\n],\n \nend\n=\n', '\n)\n\n        \nfor\n \nj\n \nin\n \nrange\n(\nn\n \n-\n \ni\n \n-\n \n2\n,\n \ni\n \n-\n \n1\n,\n \n-\n1\n):\n\n            \nprint\n(\nA\n[\nn\n \n-\n \ni\n \n-\n \n1\n][\nj\n],\n \nend\n=\n', '\n)\n\n        \nfor\n \nj\n \nin\n \nrange\n(\nn\n \n-\n \ni\n \n-\n \n2\n,\n \ni\n,\n \n-\n1\n):\n\n            \nprint\n(\nA\n[\nj\n][\ni\n],\n \nend\n=\n', '\n)\n\n    \nprint\n()\n\n\n\nspiral\n(\na\n)\n            \n\nspiral\n(\nb\n)\n\n\nspiral\n(\nc\n)",
            "title": "Practice Questions 1"
        },
        {
            "location": "/ps1/#practice-questions",
            "text": "1. Take two input strings and print out every odd indexed character of first string and then\n   followed by even indexed characters of the second string.\n\n   Input\n   -----\n\n   string1 <--- \"abcdefghi\"\n   string2 <--- \"jklmnopqr\"\n\n   Output\n   ------\n\n   bdfhjlnpr\n\n\n\n\n2. Take two input strings and construct a new string using list comprehension and join operation.\n   The new string should be constructed such that if character at index `i` is uppercase for string1\n   then choose it, if not then choose character at index `i` of string2. Whatever character you put in\n   should be an uppercase character so make sure you coerce it to one.\n   Assume that both input strings are of equal length.\n   Use Google to find out what you don't know. Remember we won't be spoonfeeding....and even\n   if we want to, it's near impossible to do it.\n\n    Input\n    -----\n    string1 <--- \"ABCDEF\"\n    string2 <--- \"jKlmno\"\n\n    string1 <--- \"abcdef\"\n    string2 <--- \"jklmno\"\n\n    string1 <--- \"AbCDEfghI\"\n    string2 <--- \"jKlmnoPQR\"\n    Output\n    ------\n\n    ABCDEF\n    JKLMNO\n    AKCDEOPQI\n\n\n3. Accept four numbers as input namely -> length, breadth, height of a cube and N. The output should\n   be a dictionary of vertices whose manhattan distance from (0, 0, 0) is less than N.\n\n   Do this using comprehension/generator expression.\n\n   Example of dict comprehension \n   -----------------------------\n   words = [\"one\", \"two\", \"three\"]\n\n   dict = {i + 1 : word for i, word in enumerate(words)}\n   dict = {(x, y, z) : man...distance for i........... if man....}\n   Input\n   -----\n   Enter length : 5\n   Enter breadth : 5\n   Enter height : 5\n   Enter N : 10\n\n   Enter length : 2\n   Enter breadth : 5\n   Enter height : 3\n   Enter N : 7\n\n   Output\n   ------\n   {(0, 0, 5): 5, (0, 0, 0): 0, (5, 0, 0): 5, (0, 5, 0): 5}\n   {(0, 0, 0): 0, (2, 0, 3): 5, (0, 5, 0): 5, (0, 0, 3): 3, (2, 0, 0): 2}\n\n\n\n\n4. Print out the spiral traversal of a given matrix. You don't need to take it as input.\n   Just set it directly in the code. Assume it's a square matrix with odd number of rows/columns.\n\n   Remember Python doesn't have matrix natively so assume as list of lists for now.\n\n   Note : To get number of rows : len(matrix_name)\n          To get number of columns : len(matrix_name[0])     \n   Test cases\n   ----------\n   a = [[1]]\n   b = [[1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]]\n   c = [[1,   2,  3,  4,  5],\n        [6,   7,  8,  9, 10],\n        [11, 12, 13, 14, 15],\n        [16, 17, 18, 19, 20],\n        [21, 22, 23, 24, 25]]\n   Output\n   ------\n   a --> 1,\n   b --> 1, 2, 3, 6, 9, 8, 7, 4, 5,\n   c --> 1, 2, 3, 4, 5, 10, 15, 20, 25, 24, 23, 22, 21, 16, 11, 6, 7, 8, 9, 14, 19, 18, 17, 12, 13,",
            "title": "Practice Questions"
        },
        {
            "location": "/ps1/#solutions",
            "text": "s1   =   input ( \"Enter string 1 : \" )  s2   =   input ( \"Enter string 2 : \" )  print ( s1 [ 1 :: 2 ]   +   s2 [:: 2 ])   s1   =   input ( \"Enter string 1 : \" )  s2   =   input ( \"Enter string 2 : \" )  if   len ( s1 )   <   len ( s2 ): \n     min_length   =   len ( s1 )  else : \n     min_length   =   len ( s2 )  \"\" . join ([ s1 [ i ]   if   s1 [ i ] . isupper ()   else   s2 [ i ] . upper ()   for   i   in   range ( 0 ,   min_length )])   l   =   input ( \"Enter length : \" )  b   =   input ( \"Enter breadth : \" )  h   =   input ( \"Enter height : \" )  N   =   input ( \"Enter N : \" )  b   =   {( i ,   j ,   k )   :   abs ( i )   +   abs ( j )   +   abs ( k )  \n      for   i   in   [ 0 ,   int ( l )] \n      for   j   in   [ 0 ,   int ( b )] \n      for   k   in   [ 0 ,   int ( h )] \n      if   abs ( i )   +   abs ( j )   +   abs ( k )   <   int ( N )}  print ( b )   a   =   [[ 1 ]]  b   =   [[ 1 ,   2 ,   3 ], \n      [ 4 ,   5 ,   6 ], \n      [ 7 ,   8 ,   9 ]]  c   =   [[ 1 ,     2 ,    3 ,    4 ,    5 ], \n      [ 6 ,     7 ,    8 ,    9 ,   10 ], \n      [ 11 ,   12 ,   13 ,   14 ,   15 ], \n      [ 16 ,   17 ,   18 ,   19 ,   20 ], \n      [ 21 ,   22 ,   23 ,   24 ,   25 ]]  def   spiral ( A ): \n     n   =   len ( A ) \n     for   i   in   range ( 0 ,   n   //   2   +   1 ): \n         for   j   in   range ( i ,   n   -   i ): \n             print ( A [ i ][ j ],   end = ', ' ) \n         for   j   in   range ( i   +   1 ,   n   -   i ): \n             print ( A [ j ][ n   -   i   -   1 ],   end = ', ' ) \n         for   j   in   range ( n   -   i   -   2 ,   i   -   1 ,   - 1 ): \n             print ( A [ n   -   i   -   1 ][ j ],   end = ', ' ) \n         for   j   in   range ( n   -   i   -   2 ,   i ,   - 1 ): \n             print ( A [ j ][ i ],   end = ', ' ) \n     print ()  spiral ( a )              spiral ( b )  spiral ( c )",
            "title": "Solutions"
        }
    ]
}