{
    "docs": [
        {
            "location": "/",
            "text": "Introduction to Programming\n\n\nUsing Python\n\n\nClick on the module numbers on the left panel to access the tutorials.",
            "title": "Home"
        },
        {
            "location": "/#introduction-to-programming",
            "text": "",
            "title": "Introduction to Programming"
        },
        {
            "location": "/#using-python",
            "text": "Click on the module numbers on the left panel to access the tutorials.",
            "title": "Using Python"
        },
        {
            "location": "/environment-setup/",
            "text": "Linux Installation\n\n\nIf you are using any Linux systems (like Ubuntu) or Mac, please open the terminal and type \npython\n to find out if it is already installed and which version is installed. Newer versions of Ubuntu have both Python2 and Python3 installed. Later versions of Mac, only have python2 installed, which can be sorted within the class.\n\n\nAs said, there is a very low chance of python not being there. If this is the case, follow these simple steps to install Python:\n\n\n\n\n\n\nOpen a Web browser and go to https://www.python.org/downloads/.\n\n\n\n\n\n\nFollow the link to download zipped source code available for Unix/Linux.\n\n\n\n\n\n\nDownload and extract files.\n\n\n\n\n\n\nEditing the Modules/Setup file if you want to customize some options.\n\n\n\n\n\n\nrun ./configure script\n\n\n\n\n\n\nmake\n\n\n\n\n\n\nmake install\n\n\n\n\n\n\nThis installs Python at standard location /usr/local/bin and its libraries at /usr/local/lib/pythonXX where XX is the version of Python.\n\n\nWindows Installation\n\n\n\n\n\n\nOpen a Web browser and type \nPython Installer\n\n\n\n\n\n\nClick the installer to install Python in the system. \n\n\n\n\n\n\nYou will be able to run code in the Python IDLE terminal which comes along with the install. Python IDLE is a unix-like shell which also allows you to use bash commands, and hence it is preferable to use IDLE.\n\n\n\n\n\n\nNOT NECESSARY: If by any chance you want to run from the command prompt, you will have to set the environment variables on Windows.\n\n\nPackage Installer\n\n\nEITHER pip or conda can be used for this purpose. pip comes natively with the python installation. Check if it is present by typing either \npip\n or \nconda\n on the terminal. If you don't have one, please contact the instructor of the course.\n\n\nFor a package installation, type the following command in the terminal depending on the package installer you have\n\n\n<package installer> install <package>\n\n\n\n\n\nwhere \n can be conda or pip. \n will be the package you desire to install.\n\n\nFor example, in the next tutorial, you will have to install numpy which can be done by the following command:\n\n\npip install numpy\n\n\n\n\n\nVirtual Environments\n\n\nWe'll be covering this in the class, when the need arises, to avoid confusion.",
            "title": "Environment Setup"
        },
        {
            "location": "/environment-setup/#linux-installation",
            "text": "If you are using any Linux systems (like Ubuntu) or Mac, please open the terminal and type  python  to find out if it is already installed and which version is installed. Newer versions of Ubuntu have both Python2 and Python3 installed. Later versions of Mac, only have python2 installed, which can be sorted within the class.  As said, there is a very low chance of python not being there. If this is the case, follow these simple steps to install Python:    Open a Web browser and go to https://www.python.org/downloads/.    Follow the link to download zipped source code available for Unix/Linux.    Download and extract files.    Editing the Modules/Setup file if you want to customize some options.    run ./configure script    make    make install    This installs Python at standard location /usr/local/bin and its libraries at /usr/local/lib/pythonXX where XX is the version of Python.",
            "title": "Linux Installation"
        },
        {
            "location": "/environment-setup/#windows-installation",
            "text": "Open a Web browser and type  Python Installer    Click the installer to install Python in the system.     You will be able to run code in the Python IDLE terminal which comes along with the install. Python IDLE is a unix-like shell which also allows you to use bash commands, and hence it is preferable to use IDLE.    NOT NECESSARY: If by any chance you want to run from the command prompt, you will have to set the environment variables on Windows.",
            "title": "Windows Installation"
        },
        {
            "location": "/environment-setup/#package-installer",
            "text": "EITHER pip or conda can be used for this purpose. pip comes natively with the python installation. Check if it is present by typing either  pip  or  conda  on the terminal. If you don't have one, please contact the instructor of the course.  For a package installation, type the following command in the terminal depending on the package installer you have  <package installer> install <package>  where   can be conda or pip.   will be the package you desire to install.  For example, in the next tutorial, you will have to install numpy which can be done by the following command:  pip install numpy",
            "title": "Package Installer"
        },
        {
            "location": "/environment-setup/#virtual-environments",
            "text": "We'll be covering this in the class, when the need arises, to avoid confusion.",
            "title": "Virtual Environments"
        },
        {
            "location": "/ipython-tutorial/",
            "text": "(Note: some of the screenshots here may be out-of-date. However, this should still prove\nuseful as a quick intro, and for the general menu layout, etc.)\n\n\nIn this class, we will use IPython notebooks (more recently known as \n\nJupyter notebooks\n) for the programming assignments. \nAn IPython notebook lets you write and execute Python code in your web browser. \nIPython notebooks make it very easy to tinker with code and execute it in bits \nand pieces; for this reason IPython notebooks are widely used in scientific \ncomputing.\n\n\n\n\n\nOnce you have it installed, start it with this command:\n\n\njupyter notebook\n\n\n\n\n\nOnce your notebook server is running, point your web browser at http://localhost:8888 to\nstart using your notebooks. If everything worked correctly, you should\nsee a screen like this, showing all available IPython notebooks in the current\ndirectory:\n\n\n\n\nIf you click through to a notebook file, you will see a screen like this:\n\n\n\n\nAn IPython notebook is made up of a number of \ncells\n. Each cell can contain\nPython code. You can execute a cell by clicking on it and pressing \nShift-Enter\n.\nWhen you do so, the code in the cell will run, and the output of the cell\nwill be displayed beneath the cell. For example, after running the first cell\nthe notebook looks like this:\n\n\n\n\nGlobal variables are shared between cells. Executing the second cell thus gives\nthe following result:\n\n\n\n\nBy convention, IPython notebooks are expected to be run from top to bottom.\nFailing to execute some cells or executing cells out of order can result in\nerrors:\n\n\n\n\nAfter you have modified an IPython notebook for one of the assignments by\nmodifying or executing some of its cells, remember to \nsave your changes!\n\n\n\n\nThis has only been a brief introduction to IPython notebooks, but it should\nbe enough to get you up and running on the assignments for this course.",
            "title": "Jupyter Notebook Tutorial"
        },
        {
            "location": "/lecture-1/",
            "text": "Lecture 1: Introduction to Programming\n\n\nAgenda for the Class:\n\n\n\n\nPython in-built datatypes\n\n\nBasic mathematical operators and Precedence order\n\n\nPython Interpreter vs Python for Scripting\n\n\n\n\nFirstly we'll focus on the \ndatatypes\n.\n1. \nNumeric\n\n2. \nStrings\n\n3. \nLists\n\n\nGeneral format for \nAssigning\n a variable a value:\nVariable_name = Variable_Value\n\n\n\n\nWe \nDo not\n mention datatype while assigning a variable a value in Python. (i.e. Dynamically Typed)\n\n\n=\n is used to assign a variable a value. ( L Value and R value)\n\n\nA variable name must follow certain naming conventions. Example: '23', 'len' can be variable names.\n\n\nThere is no such thing as \"variable declaration\" or \"variable initialization\" in Python. It's only variable assignment\n\n\n\n\nNumeric data\n\n\na\n=\n1\n\n\nb\n=\n3.14\n\n\n# Assigning value 1 to variable a and 3.14 to variable b\n\n\n\n\n\n\nMathematical Operations on Variables:\n1. Add ('+')\n2. Multiple ('*')\n3. Subtract ('-')\n4. Divide ('/')\n5. Modulo ('%')\n6. Exponentiation (**)\n\n\nOrder of Precedence\n\n\nExponent > (Multiple, Divide, Modulo) > (Add, Subtract)\n\n\na\n \n=\n \n20\n\n\nb\n \n=\n \n10\n\n\nc\n \n=\n \n15\n\n\nd\n \n=\n \n5\n\n\ne\n \n=\n \n0\n\n\n\n\n\n\ne\n \n=\n \n(\na\n \n+\n \nb\n)\n \n*\n \nc\n \n/\n \nd\n       \n#( 30 * 15 ) / 5\n\n\nprint\n \n(\n\"Value of (a + b) * c / d is \"\n,\n  \ne\n)\n\n\n\n\n\n\nValue of (a + b) * c / d is  90.0\n\n\n\n\n\ne\n \n=\n \n((\na\n \n+\n \nb\n)\n \n*\n \nc\n)\n \n/\n \nd\n     \n# (30 * 15 ) / 5\n\n\nprint\n \n(\n\"Value of ((a + b) * c) / d is \"\n,\n  \ne\n)\n\n\n\n\n\n\nValue of ((a + b) * c) / d is  90.0\n\n\n\n\n\ne\n \n=\n \n(\na\n \n+\n \nb\n)\n \n*\n \n(\nc\n \n/\n \nd\n);\n    \n# (30) * (15/5)\n\n\nprint\n \n(\n\"Value of (a + b) * (c / d) is \"\n,\n  \ne\n)\n\n\n\n\n\n\nValue of (a + b) * (c / d) is  90.0\n\n\n\n\n\ne\n \n=\n \na\n \n+\n \n(\nb\n \n*\n \nc\n)\n \n/\n \nd\n;\n      \n#  20 + (150/5)\n\n\nprint\n \n(\n\"Value of a + (b * c) / d is \"\n,\n  \ne\n)\n\n\n\n\n\n\nValue of a + (b * c) / d is  50.0\n\n\n\n\n\nStrings\n\n\n\n\nImmutable\n datatype\n\n\nString enclosed within \n\" String\"\n or \n'String'\n\n\n\n\ncourse_name\n \n=\n \n\"Introduction to Programming\"\n\n\nquestion\n \n=\n \n\"Having a good time ? ;)\"\n\n\nprint\n(\ncourse_name\n)\n\n\nprint\n(\nquestion\n)\n\n\n\n\n\n\nIntroduction to Programming\nHaving a good time ? ;)\n\n\n\n\n\nOperations on Strings\n\n\n\n\nSince strings are immutable, we can't change the value stored in a string\n\n\nWe can concatenate ('join') multiple strings.\n\n\nSlice/substring operations\n\n\n\n\nstring_1\n \n=\n \n\"Hello World!\"\n\n\nn\n \n=\n \nlen\n(\nstring_1\n)\n  \n# \"len\" gives us the number of characters in the string\n\n\nprint\n(\nstring_1\n \n+\n \n\" has\"\n,\n \nn\n \n,\n \n\"characters\"\n)\n\n\n\n\n\n\nHello World! has 12 characters\n\n\n\n\n\n\n\nIndexing\n : Every charcater of the string can be accessed by it's position in the string.\n\n\nIndexing starts from zero.\n\n\nSyntax\n    string_name[index_number]\n\n\n\n\nExample:    \n\n\nprint\n(\nstring_1\n[\n0\n])\n\n\nprint\n(\nstring_1\n[\n1\n])\n\n\n\n\n\n\nH\ne\n\n\n\n\n\nprint\n(\nstring_1\n[\n-\n2\n])\n\n\n\n\n\n\nd\n\n\n\n\n\nNegative Indexing:\nstring[-1] gives us the last character\nstring[-2] gives us the second last character\nand so on...\n\n\nSlicing operations\n\n\nSyntax:\n\n\nstring_name[start_index,end_index]\n\n\nprint\n(\nstring_1\n[\n0\n:\n2\n])\n\n\nprint\n(\nstring_1\n[\n5\n \n:\n \nlen\n(\nstring_1\n)])\n\n\n\n\n\n\nHe\n World!\n\n\n\n\n\nprint\n(\nstring_1\n[\n0\n:\n4\n]\n+\nstring_1\n[\n4\n:\nlen\n(\nstring_1\n)])\n\n\n\n\n\n\nHello World!\n\n\n\n\n\nLists\n\n\n\n\nInitializing syntax: \\n\n    list_name = [value_1,value_2,...,value_n]\n\n\nBehaviour Similar to strings\n\n\nMutable\n\n\nCan contain multiple data types.\n\n\n\n\nprimes\n \n=\n \n[\n2\n,\n3\n,\n5\n,\n8\n,\n11\n]\n\n\nprint\n(\nprimes\n)\n\n\nprint\n(\nprimes\n[\n0\n])\n\n\nprint\n(\nlen\n(\nprimes\n))\n\n\n\n\n\n\n[2, 3, 5, 8, 11]\n\n\n2\n\n\n5\n\n\n\n\n\n\nclassroom\n \n=\n \n[\n'L'\n,\n'T'\n,\n \n1\n]\n\n\nprint\n(\nclassroom\n)\n\n\nprint\n((\nclassroom\n[\n2\n]\n+\n \n4\n))\n\n\n\n\n\n\n['L', 'T', 1]\n\n\n5\n\n\n\n\n\n\nWhat to do next?\n\n\n\n\nPlay around in the python interpreter to explore various functionalities\n\n\nUnderstand the rules to name variables.\n\n\n\n\nDownload the Jupyter Notebook from \nhere",
            "title": "Lecture 1 - DataTypes, Basic Math Operations, Precedence"
        },
        {
            "location": "/lecture-1/#lecture-1-introduction-to-programming",
            "text": "",
            "title": "Lecture 1: Introduction to Programming"
        },
        {
            "location": "/lecture-1/#agenda-for-the-class",
            "text": "Python in-built datatypes  Basic mathematical operators and Precedence order  Python Interpreter vs Python for Scripting   Firstly we'll focus on the  datatypes .\n1.  Numeric \n2.  Strings \n3.  Lists  General format for  Assigning  a variable a value:\nVariable_name = Variable_Value   We  Do not  mention datatype while assigning a variable a value in Python. (i.e. Dynamically Typed)  =  is used to assign a variable a value. ( L Value and R value)  A variable name must follow certain naming conventions. Example: '23', 'len' can be variable names.  There is no such thing as \"variable declaration\" or \"variable initialization\" in Python. It's only variable assignment",
            "title": "Agenda for the Class:"
        },
        {
            "location": "/lecture-1/#numeric-data",
            "text": "a = 1  b = 3.14  # Assigning value 1 to variable a and 3.14 to variable b   Mathematical Operations on Variables:\n1. Add ('+')\n2. Multiple ('*')\n3. Subtract ('-')\n4. Divide ('/')\n5. Modulo ('%')\n6. Exponentiation (**)",
            "title": "Numeric data"
        },
        {
            "location": "/lecture-1/#order-of-precedence",
            "text": "Exponent > (Multiple, Divide, Modulo) > (Add, Subtract)  a   =   20  b   =   10  c   =   15  d   =   5  e   =   0   e   =   ( a   +   b )   *   c   /   d         #( 30 * 15 ) / 5  print   ( \"Value of (a + b) * c / d is \" ,    e )   Value of (a + b) * c / d is  90.0  e   =   (( a   +   b )   *   c )   /   d       # (30 * 15 ) / 5  print   ( \"Value of ((a + b) * c) / d is \" ,    e )   Value of ((a + b) * c) / d is  90.0  e   =   ( a   +   b )   *   ( c   /   d );      # (30) * (15/5)  print   ( \"Value of (a + b) * (c / d) is \" ,    e )   Value of (a + b) * (c / d) is  90.0  e   =   a   +   ( b   *   c )   /   d ;        #  20 + (150/5)  print   ( \"Value of a + (b * c) / d is \" ,    e )   Value of a + (b * c) / d is  50.0",
            "title": "Order of Precedence"
        },
        {
            "location": "/lecture-1/#strings",
            "text": "Immutable  datatype  String enclosed within  \" String\"  or  'String'   course_name   =   \"Introduction to Programming\"  question   =   \"Having a good time ? ;)\"  print ( course_name )  print ( question )   Introduction to Programming\nHaving a good time ? ;)",
            "title": "Strings"
        },
        {
            "location": "/lecture-1/#operations-on-strings",
            "text": "Since strings are immutable, we can't change the value stored in a string  We can concatenate ('join') multiple strings.  Slice/substring operations   string_1   =   \"Hello World!\"  n   =   len ( string_1 )    # \"len\" gives us the number of characters in the string  print ( string_1   +   \" has\" ,   n   ,   \"characters\" )   Hello World! has 12 characters   Indexing  : Every charcater of the string can be accessed by it's position in the string.  Indexing starts from zero.  Syntax\n    string_name[index_number]   Example:      print ( string_1 [ 0 ])  print ( string_1 [ 1 ])   H\ne  print ( string_1 [ - 2 ])   d  Negative Indexing:\nstring[-1] gives us the last character\nstring[-2] gives us the second last character\nand so on...",
            "title": "Operations on Strings"
        },
        {
            "location": "/lecture-1/#slicing-operations",
            "text": "Syntax:  string_name[start_index,end_index]  print ( string_1 [ 0 : 2 ])  print ( string_1 [ 5   :   len ( string_1 )])   He\n World!  print ( string_1 [ 0 : 4 ] + string_1 [ 4 : len ( string_1 )])   Hello World!",
            "title": "Slicing operations"
        },
        {
            "location": "/lecture-1/#lists",
            "text": "Initializing syntax: \\n\n    list_name = [value_1,value_2,...,value_n]  Behaviour Similar to strings  Mutable  Can contain multiple data types.   primes   =   [ 2 , 3 , 5 , 8 , 11 ]  print ( primes )  print ( primes [ 0 ])  print ( len ( primes ))   [2, 3, 5, 8, 11]  2  5   classroom   =   [ 'L' , 'T' ,   1 ]  print ( classroom )  print (( classroom [ 2 ] +   4 ))   ['L', 'T', 1]  5",
            "title": "Lists"
        },
        {
            "location": "/lecture-1/#what-to-do-next",
            "text": "Play around in the python interpreter to explore various functionalities  Understand the rules to name variables.",
            "title": "What to do next?"
        },
        {
            "location": "/lecture-1/#download-the-jupyter-notebook-from-here",
            "text": "",
            "title": "Download the Jupyter Notebook from here"
        }
    ]
}